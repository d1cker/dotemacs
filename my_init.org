* emacs configuration
** default emacs stuff
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
(blink-cursor-mode -1)
#+END_SRC
** garbage collection 
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1024 1024))
#+END_SRC

** use-package
Bootstrap use-package

#+BEGIN_SRC emacs-lisp 
(setq load-prefer-newer t)              ; Don't load outdated byte code

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap 'use-package'
(eval-after-load 'gnutls
  '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(setq use-package-always-ensure t)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp 
(set-language-environment "UTF-8")
(setq default-frame-alist '((font . "DejaVu Sans Mono-14")))

(use-package
   zenburn-theme 
   :config
   (load-theme 'zenburn t))
#+END_SRC
 
** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-banner-logo-title "Welcome to Dicker's Emacs")
  (setq dashboard-set-navigator t))
#+END_SRC
** Super-save
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :ensure t
  :config
  (super-save-mode +1))
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
)
#+END_SRC
** Winner
undo windows state with C-c left/right
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Save place
return to the last place on the save buffer 
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init (save-place-mode))
#+END_SRC
** Anzu
  search and replace with regexp
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t
  :bind (("C-c r" . anzu-query-replace)
         ("C-c C-r" . anzu-query-replace-regexp))
  :config
  (global-anzu-mode))
#+END_SRC
** EditorConfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC
** Swiper/Ivy/Counsel
#+BEGIN_SRC emacs-lisp 
   (use-package counsel
:ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))

  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))

  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
	 ("C-r" . swiper-isearch)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
** IBUFFER
 #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org" (name . "^.*org$"))
               ("magit" (mode . magit-mode))
               ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
               ("web" (or (mode . web-mode) (mode . js2-mode)))
               ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
               ("mu4e" (or

                        (mode . mu4e-compose-mode)
                        (name . "\*mu4e\*")
                        ))
               ("programming" (or
                               (mode . clojure-mode)
                               (mode . clojurescript-mode)
                               (mode . python-mode)
                               (mode . c++-mode)))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")))
               ))))
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "default")))

;; don't show these
                                        ;(add-to-list 'ibuffer-never-show-predicates "zowie")
;; Don't show filter groups if there are no buffers in that group
(setq ibuffer-show-empty-filter-groups nil)

;; Don't ask for confirmation to delete marked buffers
(setq ibuffer-expert t)
 #+END_SRC
** Load other files
#+BEGIN_SRC emacs-lisp
(defun load-if-exists (f)
  "load the elisp file only if it exists and is readable"
  (if (file-readable-p f)
      (load-file f)))
#+END_SRC

** Undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  ;; autosave the undo-tree history
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t)
)
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode +1)
)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :bind
  (("C-x g" . magit-status))
  :config
  (global-magit-file-mode 1)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
)

(use-package diff-hl
  :ensure t
  :config
  (global-diff-hl-mode +1)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
)

(use-package exec-path-from-shell
  :disabled
  :config
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+END_SRC
* Org-mode stuff
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(use-package htmlize :ensure t)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp 
(use-package projectile
  :ensure t
  :init
  (setq projectile-completion-system 'ivy)
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lis
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
#+END_SRC
* Flyspell-correct 
#+BEGIN_SRC emacs-lisp 
(use-package flyspell
  :ensure t
  :diminish "Spl"
  :commands (flyspell-mode flyspell-prog-mode)
  )
#+END_SRC

* Snippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
      (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t)
(use-package yasnippet-classic-snippets
  :ensure t)

(use-package auto-yasnippet
  :ensure t
  :commands (aya-create aya-expand)
  :bind (("C-c ~" . aya-create)
         ("C-c C-~" . aya-expand)))
#+END_SRC
* Expand-region
#+BEGIN_SRC emacs-lisp 
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC
* lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands lsp
  :custom
  (lsp-auto-guess-root nil)
  (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  :hook ((python-mode julia-mode) . lsp))


(use-package lsp-ui
  :after lsp-mode
  :diminish
  :commands lsp-ui-mode
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c u" . lsp-ui-imenu))
  :custom
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions nil)
  :config
  ;; Use lsp-ui-doc-webkit only in GUI
  (setq lsp-ui-doc-use-webkit t)
  ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    (setq mode-line-format nil)))
#+END_SRC
* Parens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
:ensure t
  :hook (prog-mode . smartparens-mode)
  :custom
  (sp-escape-quotes-after-insert nil)
  :config
  (require 'smartparens-config))

(show-paren-mode t)
#+END_SRC
* Compeny
#+BEGIN_SRC emacs-lisp
(use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)

    (global-company-mode t)
)

(use-package company-lsp
    :ensure t
    :config
    (setq compnay-lsp-enable-snippet t)
    (push 'company-lsp company-backends)
)


(use-package company-statistics         ; Sort company candidates by statistics
  :ensure t
  :defer t
  :config
  (setq company-statistics-file (emacs-d "cache/company-statistics"))
  (with-eval-after-load 'company
    (company-statistics-mode)))
#+END_SRC
* Shell 
* Latex
#+BEGIN_SRC emacs-lisp
(use-package tex
    :ensure auctex)
#+END_SRC
* Julia
#+BEGIN_SRC emacs-lisp
(use-package julia-mode
   :defer t
   :commands julia-mode
   :mode ("\\.jl$" . julia-mode))

(use-package lsp-julia
    :ensure t
    :config 
    (setq lsp-julia-package-dir nil)
)
#+END_SRC
* Python 
#+BEGIN_SRC emacs-lisp
(use-package lsp-python-ms
  :ensure t
  :hook (python-mode . (lambda ()
        (require 'lsp-python-ms)
	(lsp)))
)  ; or lsp-deferred
(setq lsp-python-ms--command-string (expand-file-name "~/mspyls/Microsoft.Python.LanguageServer"))
#+END_SRC
* Restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient
    :ensure t)
(use-package company-restclient
    :ensure t
    :config 
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC



* garbage collection 
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1024 1024))
#+END_SRC

* use-package
Bootstrap use-package

#+BEGIN_SRC emacs-lisp 
(setq load-prefer-newer t)              ; Don't load outdated byte code

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap 'use-package'
(eval-after-load 'gnutls
  '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(setq use-package-always-ensure t)
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp 
(set-language-environment "UTF-8")
(setq default-frame-alist '((font . "DejaVu Sans Mono-14")))

(use-package
   zenburn-theme 
   :config
   (load-theme 'zenburn t))
#+END_SRC
 
* Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-banner-logo-title "Welcome to Dicker's Emacs")
  (setq dashboard-set-navigator t))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :bind
  (("C-x g" . magit-status )))

(use-package exec-path-from-shell
  :disabled
  :config
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp 
(use-package projectile
  :ensure t
  :init
  (setq projectile-completion-system 'ivy)
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC
* Swiper/Ivy/Counsel
#+BEGIN_SRC emacs-lisp 
;;(use-package ivy
;;  :diminish ivy-mode
;;  :config
;;  (ivy-mode 1)
;;  (setq ivy-use-virtual-buffers t)
;;  (define-key ivy-minibuffer-map [remap keyboard-quit] 'minibuffer-keyboard-quit)
;;  (setq ivy-count-format "")
;;  (setq ivy-initial-inputs-alist nil))

   (use-package counsel
:ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))




  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
	 ("C-r" . swiper-isearch)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lis
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
#+END_SRC
* Flyspell-correct 
#+BEGIN_SRC emacs-lisp 
(use-package flyspell
  :ensure t
  :diminish "Spl"
  :commands (flyspell-mode flyspell-prog-mode)
  )
#+END_SRC

* Snippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
    (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t)
(use-package yasnippet-classic-snippets
  :ensure t)
#+END_SRC
* Expand-region
#+BEGIN_SRC emacs-lisp 
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC

* lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands lsp
  :custom
  (lsp-auto-guess-root nil)
  (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  :hook ((python-mode julia-mode) . lsp))


(use-package lsp-ui
  :after lsp-mode
  :diminish
  :commands lsp-ui-mode
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c u" . lsp-ui-imenu))
  :custom
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions nil)
  :config
  ;; Use lsp-ui-doc-webkit only in GUI
  (setq lsp-ui-doc-use-webkit t)
  ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    (setq mode-line-format nil)))
#+END_SRC
* Compeny
#+BEGIN_SRC emacs-lisp
(use-package company
:ensure t
:config
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 3)

(global-company-mode t)
)

(use-package company-lsp
  :ensure t
  :config
(setq compnay-lsp-enable-snippet t)
 (push 'company-lsp company-backends)
)
#+END_SRC
* Shell 
* Latex
* Julia
#+BEGIN_SRC emacs-lisp
(use-package julia-mode
   :defer t
   :commands julia-mode
   :mode ("\\.jl$" . julia-mode))

(use-package lsp-julia
:ensure t
:config 
(setq lsp-julia-package-dir nil)
)
#+END_SRC
* Python 



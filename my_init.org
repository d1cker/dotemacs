* Notes 
** fonts and icons 
Run M-x all-the-icons-install-fonts
* Emacs configuration
** Get to here
#+BEGIN_SRC emacs-lisp
(defun edit-configs ()
  "Opens the README.org file."
  (interactive)
  (find-file "~/.emacs.d/my_init.org"))

(global-set-key (kbd "C-x i") #'edit-configs)
#+END_SRC
** Constants
#+BEGIN_SRC emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")

(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")

(defconst *python3*
  (executable-find "python3")
  "Do we have python3?")

(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defconst *pdflatex*
  (executable-find "pdflatex")
  "Do we have pdflatex?")
#+END_SRC
** default emacs stuff
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
(global-auto-revert-mode t)
(blink-cursor-mode -1)
(setq-default cursor-type 'bar)
(global-auto-revert-mode t)
(delete-selection-mode 1)
(cua-selection-mode 1)
(global-hl-line-mode 1)
#+END_SRC
Smooth Scrolling
#+BEGIN_SRC emacs-lisp
;; Vertical Scroll
(setq scroll-step 1)
(setq scroll-margin 1)
(setq scroll-conservatively 101)
(setq scroll-up-aggressively 0.01)
(setq scroll-down-aggressively 0.01)
(setq auto-window-vscroll nil)
(setq fast-but-imprecise-scrolling nil)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
;; Horizontal Scroll
(setq hscroll-step 1)
(setq hscroll-margin 1)
#+END_SRC
** Key binding
#+BEGIN_SRC emacs-lisp
;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "C-x C-c") nil)
(global-set-key (kbd "M-/") nil)
;; Adjust font size like web browsers
(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)
#+END_SRC
** garbage collection 
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1024 1024))
#+END_SRC

** use-package
Bootstrap use-package

#+BEGIN_SRC emacs-lisp 
(setq load-prefer-newer t)              ; Don't load outdated byte code

(setq use-package-always-ensure t)
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap 'use-package'
(eval-after-load 'gnutls
  '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
  (require 'bind-key)
  (setq use-package-always-ensure t)
#+END_SRC

** No littering
#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :demand t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp 
(set-language-environment "UTF-8")
(setq default-frame-alist '((font . "DejaVu Sans Mono-14")))
(tool-bar-mode -1)
(menu-bar-mode -1)

(use-package solarized-theme)

(use-package heaven-and-hell
  :ensure t
  :init
  (setq heaven-and-hell-themes
        '((light . solarized-light)
          (dark . solarized-dark)))
  ;; Optionall, load themes without asking for confirmation.
  (setq heaven-and-hell-load-theme-no-confirm t)
  :hook (after-init . heaven-and-hell-init-hook)
  :bind ("<f6>" . heaven-and-hell-toggle-theme))

;; modeline
;; This package requires the fonts included with all-the-icons to be installed. Run M-x all-the-icons-install-fonts to do so.
(use-package doom-modeline
  :custom 
  (inhibit-compacting-font-caches t)
  ;;(doom-modeline-minor-modes t)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-height 15)
  :hook (after-init . doom-modeline-mode)
  :config 
  (setq doom-modeline-project-detection 'project)
)

#+END_SRC
 
** Ace window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-banner-logo-title "Welcome to Dicker's Emacs")
  (setq dashboard-set-navigator t)
  (setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)))
)
#+END_SRC
** Super-save
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :diminish
  :custom
  (super-save-auto-save-when-idle t)
  (auto-save-default nil)
  (make-backup-files nil)
  :config
  (super-save-mode +1))
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1)
)
#+END_SRC
** Winner
undo windows state with C-c left/right
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Save place
return to the last place on the save buffer 
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init (save-place-mode))
#+END_SRC
** Anzu
  search and replace with regexp
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :bind (("C-c r" . anzu-query-replace)
         ("C-c C-r" . anzu-query-replace-regexp))
  :config
  (global-anzu-mode))
#+END_SRC
** EditorConfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+END_SRC
** Swiper/Ivy/Counsel
#+BEGIN_SRC emacs-lisp 
(use-package counsel
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))

(use-package ivy
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))

  (use-package swiper
  :bind (("C-s" . swiper-isearch)
	 ("C-r" . swiper-isearch)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
    
  (use-package amx
    :defer t)
#+END_SRC
** IBUFFER
 #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org" (name . "^.*org$"))
               ("magit" (mode . magit-mode))
               ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
               ("web" (or (mode . web-mode) (mode . js2-mode)))
               ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
               ("mu4e" (or

                        (mode . mu4e-compose-mode)
                        (name . "\*mu4e\*")
                        ))
               ("programming" (or
                               (mode . clojure-mode)
                               (mode . clojurescript-mode)
                               (mode . python-mode)
                               (mode . c++-mode)
			       (mode . julia-mode)))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")))
               ))))
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "default")))

;; don't show these
                                        ;(add-to-list 'ibuffer-never-show-predicates "zowie")
;; Don't show filter groups if there are no buffers in that group
(setq ibuffer-show-empty-filter-groups nil)

;; Don't ask for confirmation to delete marked buffers
(setq ibuffer-expert t)
 #+END_SRC
** Load other files
#+BEGIN_SRC emacs-lisp
(defun load-if-exists (f)
  "load the elisp file only if it exists and is readable"
  (if (file-readable-p f)
      (load-file f)))
#+END_SRC

** Undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config
  ;; autosave the undo-tree history
  (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t)
)
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode +1)
)
#+END_SRC
** Ediff
#+BEGIN_SRC emacs-lisp
;; prevent new window for ediff session 
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :if *sys/gui*)

(use-package all-the-icons-dired
  :after all-the-icons
  :if *sys/gui*
  :diminish
  :custom-face
  (all-the-icons-dired-dir-face ((t `(:foreground ,(face-background 'default)))))
  :hook (dired-mode . all-the-icons-dired-mode)
  :config
  ;; Workaround for all-the-icons bug until PR merged https://github.com/domtronn/all-the-icons.el/pull/150
  (when (require 'all-the-icons nil 'noerror)
    (setq all-the-icons-mode-icon-alist
          (delete '(erc-mode all-the-icons-faicon "commenting-o" :height 1.0 :v-adjust 0.0 :face all-the-icons-white) all-the-icons-mode-icon-alist))
    (add-to-list 'all-the-icons-mode-icon-alist '(erc-mode all-the-icons-faicon "commenting-o" :height 1.0 :v-adjust 0.0))))
#+END_SRC
** Sudo edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :commands (sudo-edit))
#+END_SRC
** ripgrep
#+BEGIN_SRC emacs-lisp
;;(use-package rg)
#+END_SRC
** async
#+BEGIN_SRC emacs-lisp
;;(use-package async)
#+END_SRC
** Highlight indent guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :if *sys/gui*
  :diminish
  :hook ((prog-mode web-mode nxml-mode) . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'top)
  (highlight-indent-guides-delay 0)
  (highlight-indent-guides-auto-character-face-perc 7))
#+END_SRC
* Pass 
#+BEGIN_SRC emacs-lisp
(use-package password-store)

(defun pass-pull-and-push-to-git ()
   (message "pull and push changes to git") 
   (lambda () (password-store--run-git "pull")
              (password-store--run-git "push")))

(use-package pass
  :after password-store
  :config
  (advice-add #'pass-update-buffer :before #'pass-pull-and-push-to-git)
)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :bind
  (("C-x g" . magit-status))
  :config
  (global-magit-file-mode 1)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
)

(use-package forge
  :after magit
)

(use-package diff-hl
  :config
  (global-diff-hl-mode +1)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  ;; better coloring for light theme 
  :init 
  (custom-set-faces
  '(diff-hl-change ((t (:background "#3a81c3"))))
  '(diff-hl-insert ((t (:background "#7ccd7c"))))
  '(diff-hl-delete ((t (:background "#ee6363")))))
)

(use-package exec-path-from-shell
  :disabled
  :config
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+END_SRC
* Org-mode stuff
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
    :hook (org-mode . org-bullets-mode))

(use-package htmlize)

(use-package org-gcal
  :config
  (setq org-gcal-client-id (password-store-get "DevOps/gcal/client-id")
      org-gcal-client-secret (password-store-get "DevOps/gcal/client-secret")
      org-gcal-file-alist '(("or.dicker@gmail.com" .  "~/workspace/org/gcal.org"))))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp 
(use-package projectile
  :init
  (setq projectile-completion-system 'ivy)
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))

(use-package projectile-ripgrep
  :after projectile)
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode t))
#+END_SRC
* Flyspell-correct 
#+BEGIN_SRC emacs-lisp 
(use-package flyspell
  :diminish "Spl"
  :commands (flyspell-mode flyspell-prog-mode)
  :config (add-hook 'text-mode-hook 'flyspell-mode)
          (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  )
#+END_SRC

* Snippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1))

(use-package yasnippet-snippets)
(use-package yasnippet-classic-snippets)

(use-package auto-yasnippet
  :commands (aya-create aya-expand)
  :bind (("C-c ~" . aya-create)
         ("C-c C-~" . aya-expand)))
#+END_SRC
* Expand-region
#+BEGIN_SRC emacs-lisp 
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC
* Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :custom
  (treemacs-collapse-dirs 3)
  (treemacs-deferred-git-apply-delay 0.5)
  (treemacs-display-in-side-window t)
  (treemacs-file-event-delay 5000)
  (treemacs-file-follow-delay 0.2)
  (treemacs-follow-after-init t)
  (treemacs-follow-recenter-distance 0.1)
  (treemacs-git-command-pipe "")
  (treemacs-goto-tag-strategy 'refetch-index)
  (treemacs-indentation 2)
  (treemacs-indentation-string " ")
  (treemacs-is-never-other-window nil)
  (treemacs-max-git-entries 5000)
  (treemacs-no-png-images nil)
  (treemacs-no-delete-other-windows t)
  (treemacs-project-follow-cleanup nil)
  (treemacs-persist-file (expand-file-name ".cache/treemacs-persist" user-emacs-directory))
  (treemacs-recenter-after-file-follow nil)
  (treemacs-recenter-after-tag-follow nil)
  (treemacs-show-cursor nil)
  (treemacs-show-hidden-files t)
  (treemacs-silent-filewatch nil)
  (treemacs-silent-refresh nil)
  (treemacs-sorting 'alphabetic-desc)
  (treemacs-space-between-root-nodes t)
  (treemacs-tag-follow-cleanup t)
  (treemacs-tag-follow-delay 1.5)
  (treemacs-width 35)
  :config
  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  (pcase (cons (not (null (executable-find "git")))
               (not (null (executable-find "python3"))))
    (`(t . t) (treemacs-git-mode 'deferred))
    (`(t . _) (treemacs-git-mode 'simple)))
  :bind
  (("M-0"       . treemacs-select-window)
   ("C-x t 1"   . treemacs-delete-other-windows)
   ("C-x t t"   . treemacs)
   ("C-x t B"   . treemacs-bookmark)
   ("C-x t C-t" . treemacs-find-file)
   ("C-x t M-t" . treemacs-find-tag))
  (:map treemacs-mode-map ("C-p" . treemacs-previous-line)))

(use-package treemacs-magit
  :defer t
  :after (treemacs magit))

(use-package treemacs-projectile
  :defer t
  :after (treemacs projectile))

(use-package treemacs-icons-dired
  :after treemacs dired
  :config (treemacs-icons-dired-mode))
#+END_SRC
* Parens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :custom
  (sp-escape-quotes-after-insert nil)
  :config
  (require 'smartparens-config))

(show-paren-mode t)
#+END_SRC
* Compeny
#+BEGIN_SRC emacs-lisp
(use-package company
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)

    (global-company-mode t)
)

(use-package company-lsp
    :config
    (setq compnay-lsp-enable-snippet t)
    (push 'company-lsp company-backends)
)


(use-package company-statistics         ; Sort company candidates by statistics
  :defer t
  :config
  (setq company-statistics-file (emacs-d "cache/company-statistics"))
  (with-eval-after-load 'company
    (company-statistics-mode)))
#+END_SRC
* Shell 
** shell-here
#+BEGIN_SRC emacs-lisp
(use-package shell-here
  :bind ("C-c $" . shell-here)
  :config
  (when *sys/linux*
    (setq explicit-shell-file-name "/bin/bash")))
#+END_SRC
** quickrun
#+BEGIN_SRC emacs-lisp
(use-package quickrun
  :bind
  (("<f5>" . quickrun)
   ("M-<f5>" . quickrun-shell)))
#+END_SRC
* Latex
** tex
#+BEGIN_SRC emacs-lisp
(use-package tex
    :ensure auctex)
#+END_SRC
** PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools-install
  :ensure pdf-tools
  :if (and *sys/gui* (not *sys/win32*))
  :mode "\\.pdf\\'"
  :commands (pdf-loader-install)
  :custom
  (TeX-view-program-selection '((output-pdf "pdf-tools")))
  (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
  :hook
  (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
  :config
  (pdf-loader-install))
#+END_SRC
* Julia
#+BEGIN_SRC emacs-lisp
(use-package julia-mode
   :defer t
   :commands julia-mode
   :mode ("\\.jl$" . julia-mode))

(use-package lsp-julia
   :config
   (setq lsp-julia-default-environment "~/.julia/environments/v1.3")
   (add-hook 'julia-mode-hook #'lsp-mode)
)



;;(use-package vterm)
;; 
;;(use-package julia-snail
;;  :hook (julia-mode . julia-snail-mode)
;;  :config (progn
;;            ;; order matters, unfortunately:
;;            (add-to-list 'display-buffer-alist
;;                         ;; match buffers named "*julia" in general
;;                         '("\\*julia"
;;                           ;; actions:
;;                           (display-buffer-reuse-window display-buffer-same-window)))
;;            (add-to-list 'display-buffer-alist
;;                         ;; when displaying buffers named "*julia" in REPL mode
;;                         '((lambda (bufname _action)
;;                             (and (string-match-p "\\*julia" bufname)
;;                                  (with-current-buffer bufname
;;                                    (bound-and-true-p julia-snail-repl-mode))))
;;                           ;; actions:
;;                           (display-buffer-reuse-window display-buffer-pop-up-window)))
;;            ))
#+END_SRC
* Python 
  #+BEGIN_SRC emacs-lisp
  ;;(use-package python-mode
;;  :after flycheck
;;  :mode "\\.py\\'"
;;  :custom
;;  (python-indent-offset 4)
;;  (flycheck-python-pycompile-executable "python3")
;;  (python-shell-interpreter "python3"))

(use-package virtualenvwrapper
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell)
  (setq venv-location "~/.virtualenv/")
)
#+END_SRC
** Installing lsp-python-ms
1 dotnet-sdk:
wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
sudo dpkg -i packages-microsoft-prod.deb

sudo add-apt-repository universe
sudo apt-get update
sudo apt-get install apt-transport-https
sudo apt-get update
sudo apt-get install dotnet-sdk-3.1
2 clone and bulid
git clone https://github.com/Microsoft/python-language-server.git
cd python-language-server/src/LanguageServer/Impl
dotnet publish -c Release -r ubuntu.18.04-x64
chmod a+x $(git rev-parse --show-toplevel)/output/bin/Release/ubuntu.18.04-x64/publish/Microsoft.Python.LanguageServer
3 change lsp-python-ms-executable
#+BEGIN_SRC emacs-lisp
(use-package lsp-python-ms
  :after lsp-mode python
  :demand
  :if *python3*
  ;;:custom
  ;;  (lsp-python-executable-cmd "python3")
  ;;  (lsp-python-ms-python-executable-cmd "python3")
  :config
    (setq lsp-python-ms-executable
    "~/python-language-server/output/bin/Release/ubuntu.18.04-x64/publish/Microsoft.Python.LanguageServer")
)

(setq lsp-python-ms-executable "~/python-language-server/output/bin/Release/ubuntu.18.04-x64/publish/Microsoft.Python.LanguageServer")
(setq lsp-python-executable-cmd "python3")

#+END_SRC
* LSP-mode  
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :defer t
  :commands lsp
  :custom
  (lsp-auto-guess-root nil)
  (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  (lsp-file-watch-threshold 2000)
  (read-process-output-max (* 1024 1024))
  :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  :hook ((python-mode julia-mode) . lsp)
)

(use-package lsp-ui
  :after lsp-mode
  :diminish
  :commands lsp-ui-mode
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c u" . lsp-ui-imenu)
              ("M-i" . lsp-ui-doc-focus-frame))
  :custom
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions nil)
  :config
  ;; Use lsp-ui-doc-webkit only in GUI
  (setq lsp-ui-doc-use-webkit t)
  ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    (setq mode-line-format nil))
)
#+END_SRC
* Matlab
#+BEGIN_SRC emacs-lisp
(use-package matlab-mode
  :hook (matlab-shell)
  :mode ("\\.m\\'" . matlab-mode)
  :config
  (matlab-cedet-setup)
  :custom
  (matlab-indent-function t)
  (matlab-shell-command "matlab"))
#+END_SRC
* Restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient)

(use-package company-restclient
    :config 
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC

